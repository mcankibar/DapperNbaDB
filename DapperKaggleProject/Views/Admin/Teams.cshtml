@model IEnumerable<DapperKaggleProject.DTOS.TeamsDTOS.ResultTeamsDTO>

@{
    ViewData["Title"] = "NBA Teams";
    Layout = "~/Views/Shared/_AdminLayout.cshtml";
}


<div class="teams-header mb-5">
    <div class="container-fluid">
        <div class="row align-items-center">
            <div class="col-md-8">
                <h1 class="teams-title">
                    <i class="fas fa-basketball-ball text-warning me-3"></i>
                    NBA Teams
                </h1>
                <p class="teams-subtitle">Click on any team logo to view detailed information and statistics</p>
            </div>
            <div class="col-md-4 text-end">
                <button type="button" class="btn btn-outline-success btn-lg" onclick="testConnection()">
                    <i class="fas fa-plug me-2"></i>Test Connection
                </button>
            </div>

        </div>
    </div>
</div>


<div class="container-fluid">
@if (TempData["Error"] != null)
{
        <div class="alert alert-danger alert-dismissible fade show mb-4" role="alert">
            <i class="fas fa-exclamation-triangle me-2"></i>
            @TempData["Error"]
            <button type="button" class="btn-close" data-bs-dismiss="alert"></button>
        </div>
}

    
    <div class="row g-4">
        @if (Model != null && Model.Any())
        {
            @foreach (var team in Model)
            {
                <div class="col-xxl-2 col-xl-2 col-lg-3 col-md-4 col-sm-6">
                    <div class="team-card h-100" onclick="goToTeamDetails(@team.Id)">
                        <div class="team-logo-section">
                            <div class="logo-container">
                                <img src="@team.LogoPath" alt="@team.Abbreviation Logo"
                                     class="team-logo-large"
                                     onerror="this.src='/logos/default.png'" />
                                <div class="logo-background"></div>
                            </div>
                        </div>
                        <div class="team-info-section">
                            <h4 class="team-name">@team.FullName</h4>
                            <div class="team-abbreviation-badge">@team.Abbreviation</div>
                            <div class="team-details">
                                <div class="detail-item">
                                    <i class="fas fa-map-marker-alt"></i>
                                    <span>@team.City, @team.State</span>
                                </div>
                                <div class="detail-item">
                                    <i class="fas fa-calendar"></i>
                                    <span>Founded @team.YearFounded</span>
                                </div>
                            </div>
                            <div class="team-action">
                                <button class="btn btn-primary btn-team-view" onclick="event.stopPropagation(); goToTeamDetails(@team.Id)">
                                    <i class="fas fa-arrow-right me-2"></i>View Details
                                </button>
                            </div>
                        </div>
                    </div>
                </div>
            }
        }
        else
        {
            <div class="col-12">
                <div class="no-teams-card">
                    <div class="no-teams-content">
                        <i class="fas fa-basketball-ball fa-4x text-muted mb-4"></i>
                        <h3 class="text-muted">No Teams Found</h3>
                        <p class="text-muted mb-4">Database connection might be an issue. Try testing the connection.</p>
                        <div class="d-flex justify-content-center gap-3">
                            <button type="button" class="btn btn-primary" onclick="window.location.reload()">
                                <i class="fas fa-sync-alt me-2"></i>Reload Teams
                            </button>
                            <button type="button" class="btn btn-outline-success" onclick="testConnection()">
                                <i class="fas fa-plug me-2"></i>Test Connection
                            </button>
                        </div>
                    </div>
                </div>
            </div>
        }
    </div>
    </div>

    <script>
        // Direct team details navigation
        function goToTeamDetails(teamId) {
            window.location.href = `/Admin/TeamDetails/${teamId}`;
        }

        async function testConnection() {
            const testBtn = event.target;
            const originalText = testBtn.innerHTML;

            testBtn.innerHTML = '<i class="fas fa-spinner fa-spin me-2"></i>Testing...';
            testBtn.disabled = true;

            try {
                const response = await fetch('/Admin/TestConnection', {
                    method: 'GET',
                    headers: {
                        'Content-Type': 'application/json',
                    }
                });

                const result = await response.json();

                if (result.success) {
                    showToast('Connection Test', 'Database connection successful!', 'success');
                } else {
                    showToast('Connection Test', `Connection failed: ${result.message}`, 'error');
                }
            } catch (error) {
                showToast('Connection Test', `Error: ${error.message}`, 'error');
            } finally {
                testBtn.innerHTML = originalText;
                testBtn.disabled = false;
            }
        }

        function showToast(title, message, type = 'info') {
            const toastContainer = getOrCreateToastContainer();

            const toastId = 'toast_' + Date.now();
            const iconClass = getIconForType(type);
            const bgClass = getBgClassForType(type);

            const toastHtml = `
                <div id="${toastId}" class="toast" role="alert" aria-live="assertive" aria-atomic="true">
                    <div class="toast-header ${bgClass} text-white">
                        <i class="${iconClass} me-2"></i>
                        <strong class="me-auto">${title}</strong>
                        <button type="button" class="btn-close btn-close-white" data-bs-dismiss="toast"></button>
                    </div>
                    <div class="toast-body">
                        ${message}
                    </div>
                </div>
            `;

            toastContainer.insertAdjacentHTML('beforeend', toastHtml);

            const toastElement = document.getElementById(toastId);
            const toast = new bootstrap.Toast(toastElement, { delay: 5000 });
            toast.show();

            toastElement.addEventListener('hidden.bs.toast', () => {
                toastElement.remove();
            });
        }

        function getOrCreateToastContainer() {
            let container = document.getElementById('toast-container');
            if (!container) {
                container = document.createElement('div');
                container.id = 'toast-container';
                container.className = 'toast-container position-fixed top-0 end-0 p-3';
                container.style.zIndex = '1055';
                document.body.appendChild(container);
            }
            return container;
        }

        function getIconForType(type) {
            const icons = {
                'success': 'fas fa-check-circle',
                'error': 'fas fa-exclamation-circle',
                'warning': 'fas fa-exclamation-triangle',
                'info': 'fas fa-info-circle'
            };
            return icons[type] || icons['info'];
        }

        function getBgClassForType(type) {
            const bgClasses = {
                'success': 'bg-success',
                'error': 'bg-danger',
                'warning': 'bg-warning',
                'info': 'bg-info'
            };
            return bgClasses[type] || bgClasses['info'];
        }
    </script>

